import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.lightBlue5001,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black90002,
          fontSize: 16.fSize,
          fontFamily: 'Besley',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 14.fSize,
          fontFamily: 'Besley',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray70003,
          fontSize: 12.fSize,
          fontFamily: 'Besley',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 24.fSize,
          fontFamily: 'Besley',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 13.fSize,
          fontFamily: 'Besley',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 11.fSize,
          fontFamily: 'Besley',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: colorScheme.onError,
          fontSize: 8.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black90002,
          fontSize: 20.fSize,
          fontFamily: 'Besley',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 18.fSize,
          fontFamily: 'Besley',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 15.fSize,
          fontFamily: 'Besley',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFC8E6FF),
    primaryContainer: Color(0XFF094F49),
    secondaryContainer: Color(0XFFD9D9D9),

    // Error colors
    errorContainer: Color(0X997E7B7B),
    onError: Color(0XFFADADAD),
    onErrorContainer: Color(0XFF101522),

    // On colors(text colors)
    onPrimary: Color(0X4C4D04A8),
    onPrimaryContainer: Color(0XFF050505),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFFFD25E);

  // Black
  Color get black900 => Color(0XFF0A0B0B);
  Color get black90001 => Color(0XFF030303);
  Color get black90002 => Color(0XFF000000);

  // BlueGray
  Color get blueGray400 => Color(0XFF898A8D);
  Color get blueGray50 => Color(0XFFE8F3F1);

  // DeepOrange
  Color get deepOrangeA400 => Color(0XFFFA4A0C);

  // Gray
  Color get gray100 => Color(0XFFF4F4F7);
  Color get gray200 => Color(0XFFEDEDED);
  Color get gray20001 => Color(0XFFEFEDE9);
  Color get gray50 => Color(0XFFF4F7FF);
  Color get gray500 => Color(0XFFA6A6A6);
  Color get gray50001 => Color(0XFF9F9F9F);
  Color get gray700 => Color(0XFF565252);
  Color get gray70001 => Color(0XFF585656);
  Color get gray70002 => Color(0XFF636266);
  Color get gray70003 => Color(0XFF555555);
  Color get gray70004 => Color(0XFF565656);
  Color get gray800 => Color(0XFF3A3A3A);
  Color get gray900 => Color(0XFF151616);
  Color get gray90001 => Color(0XFF151921);
  Color get gray90002 => Color(0XFF101623);

  // Indigo
  Color get indigo200 => Color(0XFF8CA6DB);
  Color get indigo300 => Color(0XFF68A2D7);
  Color get indigoA700 => Color(0XFF100CFA);

  // LightBlue
  Color get lightBlue50 => Color(0XFFDDF2FF);
  Color get lightBlue5001 => Color(0XFFD1E9FF);

  // LightBluec
  Color get lightBlue508c => Color(0X8CD9F1FF);

  // Orange
  Color get orange700 => Color(0XFFFF7A00);

  // Red
  Color get red300 => Color(0XFFFB6868);
  Color get redA700 => Color(0XFFE70808);

  // Teal
  Color get teal200 => Color(0XFF68BAD1);
  Color get teal300 => Color(0XFF52B0CA);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // WhiteAb
  Color get whiteA7005b => Color(0X5BFFFDFD);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
